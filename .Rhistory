}
cum_imp <- function(r) {
out <- addLayer(calc(subset(r, 1:3), fun=function(x){x[x>0]<-NA; return(-x)}),
calc(subset(r, 4), fun=function(x){x[x<0]<-NA; return(x)})
) %>%　overlay(fun=function(x)sum(x, na.rm=T))
names(out) <- c("Negative")
return(out)
}
neg_imp <- function(r) {
out <- addLayer(calc(subset(r, 1:3), fun=function(x){x[x>0]<-0; return(-x)}),
calc(subset(r, 4), fun=function(x){x[x<0]<-0; return(x)})
)
names(out) <- c("epc", "o2", "ph", "thetao")
return(out)
}
cum_imp <- function(r) {
out <- addLayer(calc(subset(r, 1:3), fun=function(x){x[x>0]<-NA; return(-x)}),
calc(subset(r, 4), fun=function(x){x[x<0]<-NA; return(x)})
) %>%　overlay(fun=function(x)sum(x, na.rm=T))
names(out) <- c("Negative")
return(out)
}
n1 <- ArgentinaSSP126::cmip6_2041_2060_exsd %>% neg_imp
n2 <- ArgentinaSSP245::cmip6_2041_2060_exsd %>% neg_imp
n5 <- ArgentinaSSP585::cmip6_2041_2060_exsd %>% neg_imp
plot(n1)
plot(n2)
plot(n5)
plot_fun(r=overlay(n1, n2, fun=function(x, y) (x-y)/y*100),
vt=expression(Delta~Cumulative~Negative~Impact~("%"))
)
plot_fun(r=overlay(overlay(t1, fun=max), overlay(t2, fun=max), fun=function(x, y) x-y),
colours=jet.colors3(7) %>% rev
)
plot_fun(r=overlay(n1, n2, fun=function(x, y) (x-y)/y*100),
)
plot_fun(r=overlay(n1, n2, fun=function(x, y) (x-y)/y*100),
)
n1
overlay(n1, n2, fun=function(x, y) (x-y)/y*100)
overlay(n1, n2, fun=function(x, y) {
if(y==0) return(0)
if(is.na(y)) return(NA)
if(y>0) (x-y)/y*100)
overlay(n1, n2, fun=function(x, y) {
if(y>0) (x-y)/y*100) else return(y)
overlay(n1, n2, fun=function(x, y) {
if(y>0) (x-y)/y*100) else y
overlay(n1, n2, fun=function(x, y) {
if(y>0) (x-y)/y*100)
overlay(n1, n2, fun=function(x, y) {
if(y>0) return((x-y)/y*100))
overlay(n1, n2, fun=function(x, y) {
if(y==0) return(0)
if(is.na(y)) return(NA)
if(y>0) (x-y)/y*100)
n1-n2
plot_fun(r=n1-n2)
neg_imp <- function(r) {
out <- addLayer(calc(subset(r, 1:3), fun=function(x){x[x>0]<-NA; return(-x)}),
calc(subset(r, 4), fun=function(x){x[x<0]<-NA; return(x)})
)
names(out) <- c("epc", "o2", "ph", "thetao")
return(out)
n1 <- ArgentinaSSP126::cmip6_2041_2060_exsd %>% neg_imp
n2 <- ArgentinaSSP245::cmip6_2041_2060_exsd %>% neg_imp
n5 <- ArgentinaSSP585::cmip6_2041_2060_exsd %>% neg_imp
n1 <- ArgentinaSSP126::cmip6_2041_2060_exsd %>% neg_imp
n2 <- ArgentinaSSP245::cmip6_2041_2060_exsd %>% neg_imp
n5 <- ArgentinaSSP585::cmip6_2041_2060_exsd %>% neg_imp
overlay(n1, n2, fun=function(x, y) {
if(y==0) return(0)
if(is.na(y)) return(NA)
if(y>0) (x-y)/y*100)
overlay(n1, n2, fun=function(x, y) {
if(y==0) return(0)
if(is.na(y)) return(NA)
if(y>0) (x-y)/y*100)
n1 <- ArgentinaSSP126::cmip6_2041_2060_exsd %>% neg_imp
n2 <- ArgentinaSSP245::cmip6_2041_2060_exsd %>% neg_imp
n5 <- ArgentinaSSP585::cmip6_2041_2060_exsd %>% neg_imp
neg_imp <- function(r) {
out <- addLayer(calc(subset(r, 1:3), fun=function(x){x[x>0]<-NA; return(-x)}),
calc(subset(r, 4), fun=function(x){x[x<0]<-NA; return(x)})
)
names(out) <- c("epc", "o2", "ph", "thetao")
return(out)
cum_imp <- function(r) {
out <- addLayer(calc(subset(r, 1:3), fun=function(x){x[x>0]<-NA; return(-x)}),
calc(subset(r, 4), fun=function(x){x[x<0]<-NA; return(x)})
) %>%　overlay(fun=function(x)sum(x, na.rm=T))
names(out) <- c("Negative")
return(out)
}
neg_imp <- function(r) {
out <- addLayer(calc(subset(r, 1:3), fun=function(x){x[x>0]<-NA; return(-x)}),
calc(subset(r, 4), fun=function(x){x[x<0]<-NA; return(x)})
)
names(out) <- c("epc", "o2", "ph", "thetao")
return(out)
}
cum_imp <- function(r) {
out <- addLayer(calc(subset(r, 1:3), fun=function(x){x[x>0]<-NA; return(-x)}),
calc(subset(r, 4), fun=function(x){x[x<0]<-NA; return(x)})
) %>%　overlay(fun=function(x)sum(x, na.rm=T))
names(out) <- c("Negative")
return(out)
}
n1 <- ArgentinaSSP126::cmip6_2041_2060_exsd %>% neg_imp
n2 <- ArgentinaSSP245::cmip6_2041_2060_exsd %>% neg_imp
n5 <- ArgentinaSSP585::cmip6_2041_2060_exsd %>% neg_imp
overlay(n1, n2, fun=function(x, y) {
if(y==0) return(0)
if(is.na(y)) return(NA)
if(y>0) (x-y)/y*100)
overlay(n1, n2, fun=function(x, y) {
if(y>0) return((x-y)/y*100))
plot_fun(r=n1-n2)
neg_imp <- function(r) {
out <- addLayer(calc(subset(r, 1:3), fun=function(x){x[x>0]<-0; return(-x)}),
calc(subset(r, 4), fun=function(x){x[x<0]<-0; return(x)})
)
names(out) <- c("epc", "o2", "ph", "thetao")
return(out)
cum_imp <- function(r) {
out <- addLayer(calc(subset(r, 1:3), fun=function(x){x[x>0]<-NA; return(-x)}),
calc(subset(r, 4), fun=function(x){x[x<0]<-NA; return(x)})
) %>%　overlay(fun=function(x)sum(x, na.rm=T))
names(out) <- c("Negative")
return(out)
}
neg_imp <- function(r) {
out <- addLayer(calc(subset(r, 1:3), fun=function(x){x[x>0]<-0; return(-x)}),
calc(subset(r, 4), fun=function(x){x[x<0]<-0; return(x)})
)
names(out) <- c("epc", "o2", "ph", "thetao")
return(out)
}
cum_imp <- function(r) {
out <- addLayer(calc(subset(r, 1:3), fun=function(x){x[x>0]<-NA; return(-x)}),
calc(subset(r, 4), fun=function(x){x[x<0]<-NA; return(x)})
) %>%　overlay(fun=function(x)sum(x, na.rm=T))
names(out) <- c("Negative")
return(out)
}
n1 <- ArgentinaSSP126::cmip6_2041_2060_exsd %>% neg_imp
n2 <- ArgentinaSSP245::cmip6_2041_2060_exsd %>% neg_imp
n5 <- ArgentinaSSP585::cmip6_2041_2060_exsd %>% neg_imp
plot_fun(r=n1-n2)
clac(n2, fun=function(x)x[x==0] <- NA)
calac(n2, fun=function(x)x[x==0] <- NA)
calc(n2, fun=function(x)x[x==0] <- NA)
plot(n2)
overlay(n1, n2, fun=function(x, y) {
d <- x-y
y[y==0] <- NA
d/y*100
}
overlay(n1, n2, fun=function(x, y) {
d <- x-y
y[y==0] <- NA
d/y*100
} )
r <- overlay(n1, n2, fun=function(x, y) {
d <- x-y
y[y==0] <- NA
d/y*100
})
plot_fun(r=r)
plot_fun(r=r)
subset(r, 1)
plot_fun(r=r, q_limits = c(0, 0.99))
plot_fun(r=r, q_limits = c(0, 0.95))
plot_fun(r=r, q_limits = c(0, 0.99))
plot_fun(r=n1-n2, q_limits = c(0, 0.99))
plot_fun(n2)
subset(n1-n2, -1)
subset(n1-n2, 2:4)
subset(n1-n2, 2:4)/subset(n2, 2:4)
plot_fun(subset(n1-n2, 2:4)/subset(n2, 2:4))
plot_fun(subset(n1-n2, 2:4)/subset(n2, 2:4)*100)
subset(n1-n2, 1)/subset(n2, 1)*100
e <- subset(n1-n2, 1)/subset(n2, 1)*100
plot(e)
(n1-n2)/n2*100
plot((n1-n2)/n2*100)
plot_fun((n1-n2)/n2*100)
is.infinite()
calc(e, fun=function(x) x[is.infinite(x)] <- 0, return(x))
calc(e, fun=function(x) x[is.infinite(x)] <- 0; return(x))
e
e[is.finite(e)]
e[is.finite(e)] <- 0
plot(e)
e
?is.infinite
e <- subset(n1-n2, 1)/subset(n2, 1)*100
e[is.infinite(e)] <- 0
e
plot(e)
overlay(n1, n2, fun(x, y){
overlay(n1, n2, fun=function(x, y){
out <- (x-y)/y*100
out[is.infinite(out)] <- 0
return(out)
})
r <- overlay(n1, n2, fun=function(x, y){
out <- (x-y)/y*100
out[is.infinite(out)] <- 0
return(out)
})
plot_fun(r=r, q_limits = c(0, 0.99))
plot_fun(r=r, q_limits = c(0, 0.99))
r1 <- subset(n1-n2, 1)/subset(n2, 1)*100
r1[is.infinite(r1)] <- 0
r2 <- subset(n1-n2, 2:4)/subset(n2, 2:4)*100
addLayer(r1, r2)
plot_fun(r=r)
plot_fun(r=r1)
plot_fun(r=r2)
plot_fun(r=r2, q_limits = c(0, 1))
plot_fun(r=r2, q_limits = c(0, 0.99))
r <- addLayer(r1, r2)
plot_fun(r=r)
r
r1 <- subset(n1-n2, 1)/subset(n2, 1)*100
r1[is.infinite(r1)] <- 0
r2 <- subset(n1-n2, 2:4)/subset(n2, 2:4)*100
r <- addLayer(r1, r2)
plot(r)
plot_fun(r=r)
plot_fun(r=r)
r1 <- subset(n1-n2, 1)/subset(n2, 1)*100
r1[is.infinite(r1)] <- 0
r2 <- subset(n1-n2, 2:4)/subset(n2, 2:4)*100
r <- addLayer(r1, r2)
plot(r)
plot_fun(r)
plot_fun(r2)
plot_fun(r1)
r <- overlay(n1, n2, fun=function(x, y){
out <- (x-y)/y*100
out[is.infinite(out)] <- 0
return(out)
})
plot_fun(subset(r, 1))
plot_fun(subset(r, 2:3))
plot_fun(subset(r, 2:4))
plot_fun(r)
plot_fun(subset(r, 2:4))
plot_fun(subset(r, 1))
plot_fun(subset(r, 1:4))
r1 <- subset(n1-n2, 1)/subset(n2, 1)*100
r1[is.infinite(r1)] <- 0
r2 <- subset(n1-n2, 2:4)/subset(n2, 2:4)*100
r <- addLayer(r1, r2)
plot_fun(r)
r <- overlay(n1, n2, fun=function(x, y){
out <- (x-y)/y*100
#out[is.infinite(out)] <- 0
return(out)
})
plot_fun(r)
plot_fun(n1-n2)
plot_fun((n1-n2)/n2)
neg_imp <- function(r) {
out <- addLayer(calc(subset(r, 1:3), fun=function(x){x[x>0]<-NA; return(-x)}),
calc(subset(r, 4), fun=function(x){x[x<0]<-NA; return(x)})
)
names(out) <- c("epc", "o2", "ph", "thetao")
return(out)
}
n1 <- ArgentinaSSP126::cmip6_2041_2060_exsd %>% neg_imp
n2 <- ArgentinaSSP245::cmip6_2041_2060_exsd %>% neg_imp
n5 <- ArgentinaSSP585::cmip6_2041_2060_exsd %>% neg_imp
r1 <- subset(n1-n2, 1)/subset(n2, 1)*100
r1[is.infinite(r1)] <- 0
r2 <- subset(n1-n2, 2:4)/subset(n2, 2:4)*100
r <- addLayer(r1, r2)
plot(r)
plot_fun(r)
plot(R)
plot(r)
(n1-n2)/n2
plot((n1-n2)/n2)
plot_fun((n1-n2)/n2)
plot_fun(r=overlay(n1, n2, fun=function(x, y) (x-y)/y*100),
vt=expression(Delta~Cumulative~Negative~Impact~("%"))
)
plot_fun(r=overlay(n1, n2, fun=function(x, y) (x-y)/y*100))
plot_fun(r=overlay(n1, n2, fun=function(x, y) (x-y)/y*100))
plot_fun(r=overlay(n1, n2, fun=function(x, y) (x-y)/y*100))
plot_fun <- function(r, vt=names(r), colours=NULL, q_limits=c(0.001, 0.999)){
# Convert raster to data frame and then to list
cmip6 <- as.data.frame(r, xy = TRUE) %>% na.omit %>%
gather(-x, -y, key = "var", value = "value", factor_key = TRUE)
cmip6$var <- factor(cmip6$var, labels = vt)
cmip6_list <- cmip6 %>% group_split(var)
# Depth
bathy <- etopo2022%>% as.data.frame(xy = TRUE) %>% na.omit
# ggolot list
gg_list = lapply(cmip6_list, function(dat) {
# Color key limits and colours
lim1 <- quantile(dat$value, q_limits, na.rm=TRUE)
lim2 <- max(abs(quantile(dat$value, q_limits, na.rm=TRUE)))
# If the raster only have positive values, use sequential color palettes
if(min(lim1) >= 0) {
lims <- lim1; cols <- jet.colors2(7)
# If the raster contains negative values, use diverging color palettes
} else {
lims <- c(-lim2, lim2); cols <- jet.colors3(7)}
# If color pallette is specified, use the specified color palette
if(is.null(colours)) cols <- cols else cols <- colours
# Plot raster layer
ggplot(dat) +
geom_tile(aes(x=x, y=y, fill=value))+
geom_polygon(data=arg, aes(x=X, y=Y, group=PID), fill="bisque2", colour="transparent")+
geom_sf(data=as(eez, "sf"), fill="transparent", colour="red")+
geom_contour(data=bathy, aes(x=x, y=y, z=layer), breaks=-200, linetype=2, colour="gray50")+
geom_contour(data=bathy, aes(x=x, y=y, z=layer), breaks=-4000, linetype=1, colour="gray50")+
scale_fill_gradientn(colours=cols, limits=lims)+
scale_x_continuous(expand = expansion(mult = 0))+
scale_y_continuous(expand = expansion(mult = 0))+
labs(x=NULL, y=NULL, fill=NULL, title=parse(text=dat$var[1] %>% as.character))+
facet_wrap(~ var) +
theme_bw() %+replace% theme(legend.position = "top", legend.key.width =  unit(1, 'cm'), plot.title = element_text(hjust=0.5), strip.background = element_blank(), strip.text = element_blank())
})
# Wrap ggplot list
wrap_plots(gg_list, nrow=1)
}
plot_fun(r=overlay(n1, n2, fun=function(x, y) (x-y)/y*100))
plot_fun(r=overlay(n1, n2, fun=function(x, y) (x-y)/y*100))
r <- overlay(n1, n2, fun=function(x, y) (x-y)/y*100)
plot_fun(r=subset(r, 2:4))
plot_fun(r=subset(r, 1))
plot(r)
plot_fun(r, q_limits = c(0, 1))
plot_fun <- function(r, vt=names(r), colours=NULL, q_limits=c(0.001, 0.999)){
# Convert raster to data frame and then to list
cmip6 <- as.data.frame(r, xy = TRUE) %>%
gather(-x, -y, key = "var", value = "value", factor_key = TRUE)
cmip6$var <- factor(cmip6$var, labels = vt)
cmip6_list <- cmip6 %>% group_split(var)
# Depth
bathy <- etopo2022%>% as.data.frame(xy = TRUE) %>% na.omit
# ggolot list
gg_list = lapply(cmip6_list, function(dat) {
# Color key limits and colours
lim1 <- quantile(dat$value, q_limits, na.rm=TRUE)
lim2 <- max(abs(quantile(dat$value, q_limits, na.rm=TRUE)))
# If the raster only have positive values, use sequential color palettes
if(min(lim1) >= 0) {
lims <- lim1; cols <- jet.colors2(7)
# If the raster contains negative values, use diverging color palettes
} else {
lims <- c(-lim2, lim2); cols <- jet.colors3(7)}
# If color pallette is specified, use the specified color palette
if(is.null(colours)) cols <- cols else cols <- colours
# Plot raster layer
ggplot(dat) +
geom_raster(aes(x=x, y=y, fill=value))+
geom_polygon(data=arg, aes(x=X, y=Y, group=PID), fill="bisque2", colour="transparent")+
geom_sf(data=as(eez, "sf"), fill="transparent", colour="red")+
geom_contour(data=bathy, aes(x=x, y=y, z=layer), breaks=-200, linetype=2, colour="gray50")+
geom_contour(data=bathy, aes(x=x, y=y, z=layer), breaks=-4000, linetype=1, colour="gray50")+
scale_fill_gradientn(colours=cols, limits=lims)+
scale_x_continuous(expand = expansion(mult = 0))+
scale_y_continuous(expand = expansion(mult = 0))+
labs(x=NULL, y=NULL, fill=NULL, title=parse(text=dat$var[1] %>% as.character))+
facet_wrap(~ var) +
theme_bw() %+replace% theme(legend.position = "top", legend.key.width =  unit(1, 'cm'), plot.title = element_text(hjust=0.5), strip.background = element_blank(), strip.text = element_blank())
})
# Wrap ggplot list
wrap_plots(gg_list, nrow=1)
}
r <- overlay(n1, n2, fun=function(x, y) (x-y)/y*100)
r <- overlay(n1, n2, fun=function(x, y) (x-y)/y*100)
plot_fun(r=r)
r <- overlay(n1, n2, fun=function(x, y) (x-y)/y*100)r
r
?geom_raster
plot_fun <- function(r, vt=names(r), colours=NULL, q_limits=c(0.001, 0.999)){
# Convert raster to data frame and then to list
cmip6 <- as.data.frame(r, xy = TRUE) %>%
gather(-x, -y, key = "var", value = "value", factor_key = TRUE)
cmip6$var <- factor(cmip6$var, labels = vt)
cmip6_list <- cmip6 %>% group_split(var)
# Depth
bathy <- etopo2022%>% as.data.frame(xy = TRUE) %>% na.omit
# ggolot list
gg_list = lapply(cmip6_list, function(dat) {
# Color key limits and colours
lim1 <- quantile(dat$value, q_limits, na.rm=TRUE)
lim2 <- max(abs(quantile(dat$value, q_limits, na.rm=TRUE)))
# If the raster only have positive values, use sequential color palettes
if(min(lim1) >= 0) {
lims <- lim1; cols <- jet.colors2(7)
# If the raster contains negative values, use diverging color palettes
} else {
lims <- c(-lim2, lim2); cols <- jet.colors3(7)}
# If color pallette is specified, use the specified color palette
if(is.null(colours)) cols <- cols else cols <- colours
# Plot raster layer
ggplot(dat) +
geom_raster(aes(x=x, y=y, fill=value), na.rm=TRUE)+
geom_polygon(data=arg, aes(x=X, y=Y, group=PID), fill="bisque2", colour="transparent")+
geom_sf(data=as(eez, "sf"), fill="transparent", colour="red")+
geom_contour(data=bathy, aes(x=x, y=y, z=layer), breaks=-200, linetype=2, colour="gray50")+
geom_contour(data=bathy, aes(x=x, y=y, z=layer), breaks=-4000, linetype=1, colour="gray50")+
scale_fill_gradientn(colours=cols, limits=lims)+
scale_x_continuous(expand = expansion(mult = 0))+
scale_y_continuous(expand = expansion(mult = 0))+
labs(x=NULL, y=NULL, fill=NULL, title=parse(text=dat$var[1] %>% as.character))+
facet_wrap(~ var) +
theme_bw() %+replace% theme(legend.position = "top", legend.key.width =  unit(1, 'cm'), plot.title = element_text(hjust=0.5), strip.background = element_blank(), strip.text = element_blank())
})
# Wrap ggplot list
wrap_plots(gg_list, nrow=1)
}
r <- overlay(n1, n2, fun=function(x, y) (x-y)/y*100)
plot_fun(r=r)
?theme
plot_fun <- function(r, vt=names(r), colours=NULL, q_limits=c(0.001, 0.999)){
# Convert raster to data frame and then to list
cmip6 <- as.data.frame(r, xy = TRUE) %>%
gather(-x, -y, key = "var", value = "value", factor_key = TRUE)
cmip6$var <- factor(cmip6$var, labels = vt)
cmip6_list <- cmip6 %>% group_split(var)
# Depth
bathy <- etopo2022%>% as.data.frame(xy = TRUE) %>% na.omit
# ggolot list
gg_list = lapply(cmip6_list, function(dat) {
# Color key limits and colours
lim1 <- quantile(dat$value, q_limits, na.rm=TRUE)
lim2 <- max(abs(quantile(dat$value, q_limits, na.rm=TRUE)))
# If the raster only have positive values, use sequential color palettes
if(min(lim1) >= 0) {
lims <- lim1; cols <- jet.colors2(7)
# If the raster contains negative values, use diverging color palettes
} else {
lims <- c(-lim2, lim2); cols <- jet.colors3(7)}
# If color pallette is specified, use the specified color palette
if(is.null(colours)) cols <- cols else cols <- colours
# Plot raster layer
ggplot(dat) +
geom_raster(aes(x=x, y=y, fill=value), na.rm=TRUE)+
geom_polygon(data=arg, aes(x=X, y=Y, group=PID), fill="bisque2", colour="transparent")+
geom_sf(data=as(eez, "sf"), fill="transparent", colour="red")+
geom_contour(data=bathy, aes(x=x, y=y, z=layer), breaks=-200, linetype=2, colour="gray50")+
geom_contour(data=bathy, aes(x=x, y=y, z=layer), breaks=-4000, linetype=1, colour="gray50")+
scale_fill_gradientn(colours=cols, limits=lims)+
scale_x_continuous(expand = expansion(mult = 0))+
scale_y_continuous(expand = expansion(mult = 0))+
labs(x=NULL, y=NULL, fill=NULL, title=parse(text=dat$var[1] %>% as.character))+
facet_wrap(~ var) +
theme_bw() %+replace% theme(legend.position = "top", legend.key.width =  unit(1, 'cm'), plot.title = element_text(hjust=0.5), strip.background = element_blank(), strip.text = element_blank(), panel.background = element_rect(fill="white"))
})
# Wrap ggplot list
wrap_plots(gg_list, nrow=1)
}
r <- overlay(n1, n2, fun=function(x, y) (x-y)/y*100)
plot_fun(r=r)
plot_fun <- function(r, vt=names(r), colours=NULL, q_limits=c(0.001, 0.999)){
# Convert raster to data frame and then to list
cmip6 <- as.data.frame(r, xy = TRUE) %>%
gather(-x, -y, key = "var", value = "value", factor_key = TRUE)
cmip6$var <- factor(cmip6$var, labels = vt)
cmip6_list <- cmip6 %>% group_split(var)
# Depth
bathy <- etopo2022%>% as.data.frame(xy = TRUE) %>% na.omit
# ggolot list
gg_list = lapply(cmip6_list, function(dat) {
# Color key limits and colours
lim1 <- quantile(dat$value, q_limits, na.rm=TRUE)
lim2 <- max(abs(quantile(dat$value, q_limits, na.rm=TRUE)))
# If the raster only have positive values, use sequential color palettes
if(min(lim1) >= 0) {
lims <- lim1; cols <- jet.colors2(7)
# If the raster contains negative values, use diverging color palettes
} else {
lims <- c(-lim2, lim2); cols <- jet.colors3(7)}
# If color pallette is specified, use the specified color palette
if(is.null(colours)) cols <- cols else cols <- colours
# Plot raster layer
ggplot(dat) +
geom_raster(aes(x=x, y=y, fill=value), na.rm=TRUE)+
geom_polygon(data=arg, aes(x=X, y=Y, group=PID), fill="bisque2", colour="transparent")+
geom_sf(data=as(eez, "sf"), fill="transparent", colour="red")+
geom_contour(data=bathy, aes(x=x, y=y, z=layer), breaks=-200, linetype=2, colour="gray50")+
geom_contour(data=bathy, aes(x=x, y=y, z=layer), breaks=-4000, linetype=1, colour="gray50")+
scale_fill_gradientn(colours=cols, limits=lims, na.value="white")+
scale_x_continuous(expand = expansion(mult = 0))+
scale_y_continuous(expand = expansion(mult = 0))+
labs(x=NULL, y=NULL, fill=NULL, title=parse(text=dat$var[1] %>% as.character))+
facet_wrap(~ var) +
theme_bw() %+replace% theme(legend.position = "top", legend.key.width =  unit(1, 'cm'), plot.title = element_text(hjust=0.5), strip.background = element_blank(), strip.text = element_blank())
})
# Wrap ggplot list
wrap_plots(gg_list, nrow=1)
}
r <- overlay(n1, n2, fun=function(x, y) (x-y)/y*100)
plot_fun(r=r)
r <- overlay(n1, n2, fun=function(x, y) (x-y)/y*100)
plot_fun(r=r, q_limits = c(0, 0.99))
r <- overlay(n1, n2, fun=function(x, y) (x-y)/y*100)
plot_fun(r=r, q_limits = c(0, 0.98))
r <- overlay(n1, n2, fun=function(x, y) (x-y)/y*100)
plot_fun(r=r, q_limits = c(0, 0.97))
r <- overlay(n1, n2, fun=function(x, y) (x-y)/y*100)
plot_fun(r=r, q_limits = c(0, 0.96))
r <- overlay(n1, n2, fun=function(x, y) (x-y)/y*100)
plot_fun(r=r, q_limits = c(0, 0.96))
