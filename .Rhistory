# Convert raster to data frame and then to list
cmip6 <- as.data.frame(r, xy = TRUE) %>%
gather(-x, -y, key = "var", value = "value", factor_key = TRUE)
cmip6$var <- factor(cmip6$var, labels = vt)
cmip6_list <- cmip6 %>% group_split(var)
# Depth
bathy <- etopo2022%>% as.data.frame(xy = TRUE) %>% na.omit
# ggolot list
gg_list = lapply(cmip6_list, function(dat) {
# Color key limits and colours
lim1 <- quantile(dat$value, q_limits, na.rm=TRUE)
lim2 <- max(abs(quantile(dat$value, q_limits, na.rm=TRUE)))
# If the raster only have positive values, use sequential color palettes
if(min(lim1) >= 0) {
lims <- lim1; cols <- jet.colors2(7)
# If the raster contains negative values, use diverging color palettes
} else {
lims <- c(-lim2, lim2); cols <- jet.colors3(7)}
# If color pallette is specified, use the specified color palette
if(is.null(colours)) cols <- cols else cols <- colours
# Plot raster layer
ggplot(dat) +
geom_raster(aes(x=x, y=y, fill=value), na.rm=TRUE)+
geom_polygon(data=arg, aes(x=X, y=Y, group=PID), fill="bisque2", colour="transparent")+
geom_sf(data=as(eez, "sf"), fill="transparent", colour="red")+
geom_contour(data=bathy, aes(x=x, y=y, z=layer), breaks=-200, linetype=2, colour="gray50")+
geom_contour(data=bathy, aes(x=x, y=y, z=layer), breaks=-4000, linetype=1, colour="gray50")+
scale_fill_gradientn(colours=cols, limits=lims)+
scale_x_continuous(expand = expansion(mult = 0))+
scale_y_continuous(expand = expansion(mult = 0))+
labs(x=NULL, y=NULL, fill=NULL, title=parse(text=dat$var[1] %>% as.character))+
facet_wrap(~ var) +
theme_bw() %+replace% theme(legend.position = "top", legend.key.width =  unit(1, 'cm'), plot.title = element_text(hjust=0.5), strip.background = element_blank(), strip.text = element_blank(), panel.background = element_rect(fill="white"))
})
# Wrap ggplot list
wrap_plots(gg_list, nrow=1)
}
r <- overlay(n1, n2, fun=function(x, y) (x-y)/y*100)
plot_fun(r=r)
plot_fun <- function(r, vt=names(r), colours=NULL, q_limits=c(0.001, 0.999)){
# Convert raster to data frame and then to list
cmip6 <- as.data.frame(r, xy = TRUE) %>%
gather(-x, -y, key = "var", value = "value", factor_key = TRUE)
cmip6$var <- factor(cmip6$var, labels = vt)
cmip6_list <- cmip6 %>% group_split(var)
# Depth
bathy <- etopo2022%>% as.data.frame(xy = TRUE) %>% na.omit
# ggolot list
gg_list = lapply(cmip6_list, function(dat) {
# Color key limits and colours
lim1 <- quantile(dat$value, q_limits, na.rm=TRUE)
lim2 <- max(abs(quantile(dat$value, q_limits, na.rm=TRUE)))
# If the raster only have positive values, use sequential color palettes
if(min(lim1) >= 0) {
lims <- lim1; cols <- jet.colors2(7)
# If the raster contains negative values, use diverging color palettes
} else {
lims <- c(-lim2, lim2); cols <- jet.colors3(7)}
# If color pallette is specified, use the specified color palette
if(is.null(colours)) cols <- cols else cols <- colours
# Plot raster layer
ggplot(dat) +
geom_raster(aes(x=x, y=y, fill=value), na.rm=TRUE)+
geom_polygon(data=arg, aes(x=X, y=Y, group=PID), fill="bisque2", colour="transparent")+
geom_sf(data=as(eez, "sf"), fill="transparent", colour="red")+
geom_contour(data=bathy, aes(x=x, y=y, z=layer), breaks=-200, linetype=2, colour="gray50")+
geom_contour(data=bathy, aes(x=x, y=y, z=layer), breaks=-4000, linetype=1, colour="gray50")+
scale_fill_gradientn(colours=cols, limits=lims, na.value="white")+
scale_x_continuous(expand = expansion(mult = 0))+
scale_y_continuous(expand = expansion(mult = 0))+
labs(x=NULL, y=NULL, fill=NULL, title=parse(text=dat$var[1] %>% as.character))+
facet_wrap(~ var) +
theme_bw() %+replace% theme(legend.position = "top", legend.key.width =  unit(1, 'cm'), plot.title = element_text(hjust=0.5), strip.background = element_blank(), strip.text = element_blank())
})
# Wrap ggplot list
wrap_plots(gg_list, nrow=1)
}
r <- overlay(n1, n2, fun=function(x, y) (x-y)/y*100)
plot_fun(r=r)
r <- overlay(n1, n2, fun=function(x, y) (x-y)/y*100)
plot_fun(r=r, q_limits = c(0, 0.99))
r <- overlay(n1, n2, fun=function(x, y) (x-y)/y*100)
plot_fun(r=r, q_limits = c(0, 0.98))
r <- overlay(n1, n2, fun=function(x, y) (x-y)/y*100)
plot_fun(r=r, q_limits = c(0, 0.97))
r <- overlay(n1, n2, fun=function(x, y) (x-y)/y*100)
plot_fun(r=r, q_limits = c(0, 0.96))
r <- overlay(n1, n2, fun=function(x, y) (x-y)/y*100)
plot_fun(r=r, q_limits = c(0, 0.96))
knitr::opts_chunk$set(
collapse = TRUE,
message=FALSE,
warning=FALSE,
comment = "#>"
)
library(ArgentinaSSP245)
library(ggplot2)
library(dplyr)
library(patchwork)
library(tidyr)
library(RColorBrewer)
library(sf)
help(etopo2022)
bathy <- etopo2022%>% as.data.frame(xy = TRUE)
ggplot(bathy) +
geom_raster(aes(x=x, y=y, fill=-layer))+
geom_polygon(data=arg, aes(x=X, y=Y, group=PID), fill="bisque2", colour="transparent")+
geom_sf(data=as(eez, "sf"), fill="transparent", colour="red")+
geom_contour(data=bathy, aes(x=x, y=y, z=layer), breaks=-200, linetype=2, colour="gray50")+
geom_contour(data=bathy, aes(x=x, y=y, z=layer), breaks=-4000, linetype=1, colour="gray50")+
scale_fill_gradientn(colours=terrain.colors(7), na.value="white")+
scale_x_continuous(expand = expansion(mult = 0))+
scale_y_continuous(expand = expansion(mult = 0))+
labs(x=NULL, y=NULL, fill=NULL, title="Depth (m)")+
theme_bw() %+replace% theme(legend.position = "top", legend.key.width =  unit(1, 'cm'), plot.title = element_text(hjust=0.5))
knitr::opts_chunk$set(
collapse = TRUE,
message=FALSE,
warning=FALSE,
comment = "#>"
)
library(ArgentinaSSP126)
library(ArgentinaSSP245)
library(ArgentinaSSP585)
library(ggplot2)
library(dplyr)
library(patchwork)
library(tidyr)
library(RColorBrewer)
library(sf)
plot_fun <- function(r, vt=names(r), colours=NULL, q_limits=c(0.001, 0.999)){
# Convert raster to data frame and then to list
cmip6 <- as.data.frame(r, xy = TRUE) %>%
gather(-x, -y, key = "var", value = "value", factor_key = TRUE)
cmip6$var <- factor(cmip6$var, labels = vt)
cmip6_list <- cmip6 %>% group_split(var)
# Depth
bathy <- etopo2022%>% as.data.frame(xy = TRUE) %>% na.omit
# ggolot list
gg_list = lapply(cmip6_list, function(dat) {
# Color key limits and colours
lim1 <- quantile(dat$value, q_limits, na.rm=TRUE)
lim2 <- max(abs(quantile(dat$value, q_limits, na.rm=TRUE)))
# If the raster only have positive values, use sequential color palettes
if(min(lim1) >= 0) {
lims <- lim1; cols <- jet.colors2(7)
# If the raster contains negative values, use diverging color palettes
} else {
lims <- c(-lim2, lim2); cols <- jet.colors3(7)}
# If color pallette is specified, use the specified color palette
if(is.null(colours)) cols <- cols else cols <- colours
# Plot raster layer
ggplot(dat) +
geom_raster(aes(x=x, y=y, fill=value), na.rm=TRUE)+
geom_polygon(data=arg, aes(x=X, y=Y, group=PID), fill="bisque2", colour="transparent")+
geom_sf(data=as(eez, "sf"), fill="transparent", colour="red")+
geom_contour(data=bathy, aes(x=x, y=y, z=layer), breaks=-200, linetype=2, colour="gray50")+
geom_contour(data=bathy, aes(x=x, y=y, z=layer), breaks=-4000, linetype=1, colour="gray50")+
scale_fill_gradientn(colours=cols, limits=lims, na.value="white")+
scale_x_continuous(expand = expansion(mult = 0))+
scale_y_continuous(expand = expansion(mult = 0))+
labs(x=NULL, y=NULL, fill=NULL, title=parse(text=dat$var[1] %>% as.character))+
facet_wrap(~ var) +
theme_bw() %+replace% theme(legend.position = "top", legend.key.width =  unit(1, 'cm'), plot.title = element_text(hjust=0.5), strip.background = element_blank(), strip.text = element_blank())
})
# Wrap ggplot list
wrap_plots(gg_list, nrow=1)
}
neg_imp <- function(r) {
out <- addLayer(calc(subset(r, 1:3), fun=function(x){x[x>0]<-NA; return(-x)}),
calc(subset(r, 4), fun=function(x){x[x<0]<-NA; return(x)})
)
names(out) <- c("epc", "o2", "ph", "thetao")
return(out)
}
cum_imp <- function(r) {
out <- addLayer(calc(subset(r, 1:3), fun=function(x){x[x>0]<-NA; return(-x)}),
calc(subset(r, 4), fun=function(x){x[x<0]<-NA; return(x)})
) %>%ã€€overlay(fun=function(x)sum(x, na.rm=T))
names(out) <- c("Negative")
return(out)
}
n1 <- ArgentinaSSP126::cmip6_2041_2060_exsd %>% neg_imp
n2 <- ArgentinaSSP245::cmip6_2041_2060_exsd %>% neg_imp
n5 <- ArgentinaSSP585::cmip6_2041_2060_exsd %>% neg_imp
plot_fun(r=overlay(n1, n2, fun=function(x, y) (x-y)/y*100),
q_limits = c(0, 0.96))
plot_fun(r=overlay(n1, n2, fun=function(x, y) (x-y)/y*100),
vt = c("Delta~food~shortfall~("%")", "Delta~deoxygenation~("%")", "Delta~accidification~("%")", "Delata~warming~("%")")
q_limits = c(0, 0.96))
plot_fun(r=overlay(n1, n2, fun=function(x, y) (x-y)/y*100),
vt = c("Delta~food~shortfall~("%")", "Delta~deoxygenation~("%")", "Delta~accidification~("%")", "Delata~warming~("%")"),
q_limits = c(0, 0.96))
plot_fun(r=overlay(n1, n2, fun=function(x, y) (x-y)/y*100),
vt = c("Delta~food~shortfall~()", "Delta~deoxygenation~()", "Delta~accidification~()", "Delata~warming~()"),
q_limits = c(0, 0.96))
plot_fun(r=overlay(n1, n2, fun=function(x, y) (x-y)/y*100),
vt = c("Delta~food~shortfall", "Delta~deoxygenation", "Delta~accidification", "Delta~warming"),
q_limits = c(0, 0.96))
plot_fun(r=overlay(n1, n2, fun=function(x, y) (x-y)/y*100),
vt = c("Delta~food~shortfall~("%")", "Delta~deoxygenation~("%")", "Delta~accidification~("%")", "Delta~warming~("%")"),
q_limits = c(0, 0.96))
plot_fun(r=overlay(n1, n2, fun=function(x, y) (x-y)/y*100),
vt = c("Delta~food~shortfall~"(%)"", "Delta~deoxygenation", "Delta~accidification", "Delta~warming"),
plot_fun(r=overlay(n1, n2, fun=function(x, y) (x-y)/y*100),
vt = c("Delta~food~shortfall~()", "Delta~deoxygenation", "Delta~accidification", "Delta~warming"),
q_limits = c(0, 0.96))
plot_fun(r=overlay(n1, n2, fun=function(x, y) (x-y)/y*100),
vt = c("Delta~food~shortfall~(\%\)", "Delta~deoxygenation", "Delta~accidification", "Delta~warming"),
plot_fun(r=overlay(n1, n2, fun=function(x, y) (x-y)/y*100),
vt = c("Delta~food~shortfall~(%\)", "Delta~deoxygenation", "Delta~accidification", "Delta~warming"),
plot_fun(r=overlay(n1, n2, fun=function(x, y) (x-y)/y*100),
vt = c("Delta~food~shortfall~(%)", "Delta~deoxygenation", "Delta~accidification", "Delta~warming"),
q_limits = c(0, 0.96))
plot_fun(r=overlay(n1, n2, fun=function(x, y) (x-y)/y*100),
vt = c("Delta~food~shortfall~("%")", "Delta~deoxygenation", "Delta~accidification", "Delta~warming"),
plot_fun(r=overlay(n1, n2, fun=function(x, y) (x-y)/y*100),
vt = c("Delta~food~shortfall~("a")", "Delta~deoxygenation", "Delta~accidification", "Delta~warming"),
plot_fun(r=overlay(n1, n2, fun=function(x, y) (x-y)/y*100),
vt = c("Delta~food~shortfall~(a)", "Delta~deoxygenation", "Delta~accidification", "Delta~warming"),
q_limits = c(0, 0.96))
plot_fun(r=overlay(n1, n2, fun=function(x, y) (x-y)/y*100),
vt = c("Delta~food~shortfall~("")", "Delta~deoxygenation", "Delta~accidification", "Delta~warming"),
plot_fun(r=overlay(n1, n2, fun=function(x, y) (x-y)/y*100),
vt = c("Delta~food~shortfall~(%%%)", "Delta~deoxygenation", "Delta~accidification", "Delta~warming"),
q_limits = c(0, 0.96))
?expression
plot_fun(r=overlay(n1, n2, fun=function(x, y) (x-y)/y*100),
vt = c("Delta~food~shortfall~(%%)", "Delta~deoxygenation", "Delta~accidification", "Delta~warming"),
q_limits = c(0, 0.96))
plot_fun(r=overlay(n1, n2, fun=function(x, y) (x-y)/y*100),
vt = c("Delta~food~shortfall~(%\)", "Delta~deoxygenation", "Delta~accidification", "Delta~warming"),
plot_fun(r=overlay(n1, n2, fun=function(x, y) (x-y)/y*100),
vt = c("Delta~food~shortfall~("%%")", "Delta~deoxygenation", "Delta~accidification", "Delta~warming"),
q_limits = c(0, 0.96))
plot_fun(r=overlay(n1, n2, fun=function(x, y) (x-y)/y*100),
vt = c("Delta~food~shortfall~(a)", "Delta~deoxygenation", "Delta~accidification", "Delta~warming"),
q_limits = c(0, 0.96))
plot_fun(r=overlay(n1, n2, fun=function(x, y) (x-y)/y*100),
vt = c(expression(Delta~food~shortfall~("%")), "Delta~deoxygenation", "Delta~accidification", "Delta~warming"),
q_limits = c(0, 0.96))
plot_fun(r=overlay(n1, n2, fun=function(x, y) (x-y)/y*100),
vt = c(expression(Delta~food~shortfall~("%")), expression(Delta~deoxygenation~("%")), expression(Delta~accidification~("%")), expression(Delta~warming~("%"))),
q_limits = c(0, 0.96))
plot_fun(r=overlay(n1 %>% overlay(fun=sum, na.rm=TRUE), n2 %>% overlay(fun=sum, na.rm=TRUE), fun=function(x, y) (x-y)/y*100),
vt=expression(Delta~Cumulative~Negative~Impact~("%"))
)
n1 %>% overlay(fun=sum, na.rm=TRUE)
plot(n1 %>% overlay(fun=sum, na.rm=TRUE))
plot(n2 %>% overlay(fun=sum, na.rm=TRUE))
n1
overaly(n1, sum)
overaly(n1, fun=sum)
overlay(n1, fun=sum)
overlay(n1, fun=sum, na.rm=T)
?overaly
?overaly
plot_fun(r=overlay(n1 %>% overlay(fun=sum(x, na.rm=T)), n2 %>% overlay(fun=sum(x, na.rm=T)), fun=function(x, y) (x-y)/y*100),
vt=expression(Delta~Cumulative~Negative~Impact~("%"))
)
n1 %>% overlay(fun=sum(x, na.rm=T))
n1 %>% overlay(fun=function(x)sum(x, na.rm=T))
plot_fun(r=overlay(n1 %>% overlay(fun=function(x)sum(x, na.rm=T)), n2 %>% overlay(fun=function(x)sum(x, na.rm=T)), fun=function(x, y) (x-y)/y*100),
vt=expression(Delta~Cumulative~Negative~Impact~("%"))
)
c1 <- overlay(n1, fun=function(x) sum(x, na.rm=T))
c2 <- overlay(n2, fun=function(x) sum(x, na.rm=T))
c5 <- overlay(n5, fun=function(x) sum(x, na.rm=T))
plot_fun(r=overlay(c1, c2, fun=function(x, y) (x-y)/y*100),
vt=expression(Delta~Cumulative~Negative~Impact~("%"))
)
plot_fun(r=overlay(n5, n2, fun=function(x, y) (x-y)/y*100),
vt = c(expression(Delta~food~shortfall~("%")), expression(Delta~deoxygenation~("%")), expression(Delta~accidification~("%")), expression(Delta~warming~("%"))),
q_limits = c(0, 0.96))
plot_fun(r=overlay(n5, n2, fun=function(x, y) (x-y)/y*100),
vt = c(expression(Delta~food~shortfall~("%")), expression(Delta~deoxygenation~("%")), expression(Delta~accidification~("%")), expression(Delta~warming~("%"))),
q_limits = c(0, 1))
plot_fun(r=overlay(n5, n2, fun=function(x, y) (x-y)/y*100),
vt = c(expression(Delta~food~shortfall~("%")), expression(Delta~deoxygenation~("%")), expression(Delta~accidification~("%")), expression(Delta~warming~("%"))),
q_limits = c(0.5, 1))
plot_fun(r=overlay(n5, n2, fun=function(x, y) (x-y)/y*100),
vt = c(expression(Delta~food~shortfall~("%")), expression(Delta~deoxygenation~("%")), expression(Delta~accidification~("%")), expression(Delta~warming~("%"))),
q_limits = c(0, 1))
plot_fun(r=overlay(n5, n2, fun=function(x, y) (x-y)/y*100),
vt = c(expression(Delta~food~shortfall~("%")), expression(Delta~deoxygenation~("%")), expression(Delta~accidification~("%")), expression(Delta~warming~("%"))),
q_limits = c(0, 0.999))
plot_fun(r=overlay(n5, n2, fun=function(x, y) (x-y)/y*100),
vt = c(expression(Delta~food~shortfall~("%")), expression(Delta~deoxygenation~("%")), expression(Delta~accidification~("%")), expression(Delta~warming~("%"))),
q_limits = c(0, 0.99))
plot_fun(r=overlay(n5, n2, fun=function(x, y) (x-y)/y*100),
vt = c(expression(Delta~food~shortfall~("%")), expression(Delta~deoxygenation~("%")), expression(Delta~accidification~("%")), expression(Delta~warming~("%"))),
q_limits = c(0, 0.95))
plot_fun(r=overlay(n5, n2, fun=function(x, y) (x-y)/y*100),
vt = c(expression(Delta~food~shortfall~("%")), expression(Delta~deoxygenation~("%")), expression(Delta~accidification~("%")), expression(Delta~warming~("%"))),
q_limits = c(0, 1))
r <- overlay(n5, n2, fun=function(x, y) (x-y)/y*100)
subset(r, 1)
subset(r, 1) %>% quantile(0.1)
subset(r, 1) %>% quantile(c(0.1, 0.99))
subset(r, 1) %>% quantile(c(0.025, 0.97.5))
subset(r, 1) %>% quantile(c(0.025, 0.975))
subset(r, 1) %>% quantile(c(0.025, 0.95))
subset(r, 1) %>% quantile(c(0.025, 0.975))
r <- overlay(n5, n2, fun=function(x, y) (x-y)/y*100)
plot_fun(r=overlay(n5, n2, fun=function(x, y) (x-y)/y*100),
vt = c(expression(Delta~food~shortfall~("%")), expression(Delta~deoxygenation~("%")), expression(Delta~accidification~("%")), expression(Delta~warming~("%"))),
q_limits = c(0, 1))
subset(r, 1) %>% quantile(c(0.025, 0.99))
subset(r, 1) %>% quantile(c(0.01, 0.99))
subset(r, 1) %>% quantile(c(0.01, 0.999))
calc(subset(r, 1), fun=function(x){x[x>1000] <- 1000; return(x)})
r <- overlay(n5, n2, fun=function(x, y) (x-y)/y*100)
r1 <- calc(subset(r, 1), fun=function(x){x[x>1000] <- 1000; return(x)})
r <- addLayer(r1, subset(r, 2:4))
plot_fun(r=r,
vt = c(expression(Delta~food~shortfall~("%")), expression(Delta~deoxygenation~("%")), expression(Delta~accidification~("%")), expression(Delta~warming~("%"))),
q_limits = c(0, 1))
r <- overlay(n5, n2, fun=function(x, y) (x-y)/y*100)
r1 <- calc(subset(r, 1), fun=function(x){x[x>100] <- 1000; return(x)})
r <- addLayer(r1, subset(r, 2:4))
plot_fun(r=r,
vt = c(expression(Delta~food~shortfall~("%")), expression(Delta~deoxygenation~("%")), expression(Delta~accidification~("%")), expression(Delta~warming~("%"))),
q_limits = c(0, 1))
r <- overlay(n5, n2, fun=function(x, y) (x-y)/y*100)
r1 <- calc(subset(r, 1), fun=function(x){x[x>100] <- 1000; return(x)})
r <- addLayer(r1, subset(r, 2:4))
plot_fun(r=r,
vt = c(expression(Delta~food~shortfall~("%")), expression(Delta~deoxygenation~("%")), expression(Delta~accidification~("%")), expression(Delta~warming~("%"))),
q_limits = c(0, 1))
r <- overlay(n5, n2, fun=function(x, y) (x-y)/y*100)
r1 <- calc(subset(r, 1), fun=function(x){x[x>500] <- 500; return(x)})
r <- addLayer(r1, subset(r, 2:4))
plot_fun(r=r,
vt = c(expression(Delta~food~shortfall~("%")), expression(Delta~deoxygenation~("%")), expression(Delta~accidification~("%")), expression(Delta~warming~("%"))),
q_limits = c(0, 1))
r <- overlay(n5, n2, fun=function(x, y) (x-y)/y*100)
r1 <- calc(subset(r, 1), fun=function(x){x[x>500] <- 500; return(x)})
r <- addLayer(r1, subset(r, 2:4))
plot_fun(r=r,
vt = c(expression(Delta~food~shortfall~impact~("%")), expression(Delta~deoxygenation~impact~("%")), expression(Delta~accidification~impact~("%")), expression(Delta~warming~impact~("%"))),
q_limits = c(0, 1))
plot_fun(r=overlay(n1, n2, fun=function(x, y) (x-y)/y*100),
vt = c(expression(Delta~food~shortfall~impact~("%")), expression(Delta~deoxygenation~impact~("%")), expression(Delta~accidification~impact~("%")), expression(Delta~warming~impact~("%"))),
q_limits = c(0, 0.96))
plot_fun(r=overlay(c1, c2, fun=function(x, y) (x-y)/y*100),
vt=expression(Delta~cumulative~negative~impact~("%"))
)
plot_fun(r=overlay(n1, n2, fun=function(x, y) (x-y)/y*100),
vt = c(expression(Delta~Food~shortfall~impact~("%")), expression(Delta~Deoxygenation~impact~("%")), expression(Delta~Accidification~impact~("%")), expression(Delta~Warming~impact~("%"))),
q_limits = c(0, 0.96))
plot_fun(r=overlay(c1, c2, fun=function(x, y) (x-y)/y*100),
vt=expression(Delta~Cumulative~negative~impact~("%"))
)
r <- overlay(n5, n2, fun=function(x, y) (x-y)/y*100)
# Limit the increase of food shortfall impact to 500 %
r1 <- calc(subset(r, 1), fun=function(x){x[x>500] <- 500; return(x)})
r <- addLayer(r1, subset(r, 2:4))
plot_fun(r=r,
vt = c(expression(Delta~Food~shortfall~impact~("%")), expression(Delta~Deoxygenation~impact~("%")), expression(Delta~Accidification~impact~("%")), expression(Delta~Warming~impact~("%"))),
q_limits = c(0, 1))
t1 <- subset(ArgentinaSSP126::cmip6_extoe_constant, 1:4)
t2 <- subset(ArgentinaSSP245::cmip6_extoe_constant, 1:4)
t5 <- subset(ArgentinaSSP585::cmip6_extoe_constant, 1:4)
plot_fun(r=overlay(t1, t2, fun=function(x, y) x-y),
vt=c("Delta~epc~ToE~(yr)", "Delta~o2~ToE~(yr)", "Delta~ph~ToE~(yr)", "Delta~thetao~ToE~(yr)"),
colours=jet.colors3(7) %>% rev
)
plot_fun(r=overlay(overlay(t1, fun=max), overlay(t2, fun=max), fun=function(x, y) x-y),
vt="Delta~Overall~ToE~(yr)",
colours=jet.colors3(7) %>% rev
)
plot_fun(r=overlay(t5, t2, fun=function(x, y) x-y),
vt=c("Delta~epc~ToE~(yr)", "Delta~o2~ToE~(yr)", "Delta~ph~ToE~(yr)", "Delta~thetao~ToE~(yr)"),
colours=jet.colors3(7) %>% rev
)
plot_fun(r=overlay(overlay(t5, fun=max), overlay(t2, fun=max), fun=function(x, y) x-y),
vt="Delta~Overall~ToE~(yr)",
colours=jet.colors3(7) %>% rev
)
plot_fun(r=overlay(c5, c2, fun=function(x, y) (x-y)/y*100),
vt=expression(Delta~Cumulative~negative~impact~("%"))
)
library(robis)
# Download OBIS data
sponge <- occurrence(scientificname = "Demospongiae", areaid = 7)
hist <- addLayer(etopo2022, ArgentinaSSP126::cmip6_1950_2000_av)
names(hist)[-1] <- gsub("_av_1950_to_2000", "", names(cmip6_1950_2000_av))
proj1 <- addLayer(etopo2022, ArgentinaSSP126::cmip6_2041_2060_av)
names(proj1)[-1] <- gsub("_av_2041_2060", "", names(cmip6_2041_2060_av))
proj2 <- addLayer(etopo2022, ArgentinaSSP245::cmip6_2041_2060_av)
names(proj2)[-1] <- gsub("_av_2041_2060", "", names(cmip6_2041_2060_av))
proj2 <- addLayer(etopo2022, ArgentinaSSP58::cmip6_2041_2060_av)
hist <- addLayer(etopo2022, ArgentinaSSP126::cmip6_1950_2000_av)
names(hist)[-1] <- gsub("_av_1950_to_2000", "", names(cmip6_1950_2000_av))
proj1 <- addLayer(etopo2022, ArgentinaSSP126::cmip6_2041_2060_av)
names(proj1)[-1] <- gsub("_av_2041_2060", "", names(cmip6_2041_2060_av))
proj2 <- addLayer(etopo2022, ArgentinaSSP245::cmip6_2041_2060_av)
names(proj2)[-1] <- gsub("_av_2041_2060", "", names(cmip6_2041_2060_av))
proj2 <- addLayer(etopo2022, ArgentinaSSP585::cmip6_2041_2060_av)
names(proj3)[-1] <- gsub("_av_2041_2060", "", names(cmip6_2041_2060_av))
hist <- addLayer(etopo2022, ArgentinaSSP126::cmip6_1950_2000_av)
names(hist)[-1] <- gsub("_av_1950_to_2000", "", names(cmip6_1950_2000_av))
proj1 <- addLayer(etopo2022, ArgentinaSSP126::cmip6_2041_2060_av)
names(proj1)[-1] <- gsub("_av_2041_2060", "", names(cmip6_2041_2060_av))
proj2 <- addLayer(etopo2022, ArgentinaSSP245::cmip6_2041_2060_av)
names(proj2)[-1] <- gsub("_av_2041_2060", "", names(cmip6_2041_2060_av))
proj3 <- addLayer(etopo2022, ArgentinaSSP585::cmip6_2041_2060_av)
names(proj3)[-1] <- gsub("_av_2041_2060", "", names(cmip6_2041_2060_av))
head(sponge)
library(dismo)
library(doBy)
loc <- sponge[., c("decimalLongitude", "decimalLatitude")]
library(dismo)
library(doBy)
loc <- sponge[, c("decimalLongitude", "decimalLatitude")]
coordinates(loc) <- c("decimalLongitude", "decimalLatitude")
me <-maxent(hist, loc)
p1 <- predict(me, proj1)
p2 <- predict(me, proj2)
p3 <- predict(me, proj3)
p1
plot(p1)
plot(p2)
plot(p3)
plot_fun(r=overlay(p1, p2, fun=function(x, y) (x-y)/y*100),
vt=expression(Delta~Cumulative~negative~impact~("%"))
)
plot_fun(r=overlay(p1, p2, fun=function(x, y) (x-y)/y*100),
vt=expression(Delta~Cumulative~negative~impact~("%"))
)
plot_fun(r=overlay(p1, p2, fun=function(x, y) (x-y)/y*100),
vt=expression(Delta~Habitat~Suitability~("%"))
)
plot_fun(r=overlay(p3, p2, fun=function(x, y) (x-y)/y*100),
vt=expression(Delta~Habitat~Suitability~("%"))
)
plot_fun(r=overlay(p1, p2, fun=function(x, y) (x-y)/y*100),
vt=expression(Delta~Habitat~Suitability~("%"))
)
plot_fun(r=overlay(p3, p2, fun=function(x, y) (x-y)/y*100),
vt=expression(Delta~Habitat~Suitability~("%"))
)
knitr::opts_chunk$set(
collapse = TRUE,
message=FALSE,
warning=FALSE,
comment = "#>"
)
library(ArgentinaSSP245)
library(ggplot2)
library(dplyr)
library(tidyr)
library(RColorBrewer)
library(sf)
library(robis)
# Download OBIS data
sponge <- occurrence(scientificname = "Demospongiae", areaid = 7)
hake <- occurrence(scientificname = "Merluccius hubbsi", areaid = 7)
shrimp <- occurrence(scientificname = "Pleoticus muelleri", areaid = 7)
crab <- occurrence(scientificname = "Lithodes santolla", areaid = 7)
skate <- occurrence(scientificname = "Psammobatis normani", areaid = 7)
cwc <- as.data.frame(coral)[,c("y", "x", "SPECIES")]
names(cwc) <- c("decimalLatitude", "decimalLongitude", "scientificName")
# Combine all occurrence data
occ <- rbind(hake[, c(6:7, 21)] %>% cbind(Taxa="Argentine hake"),
shrimp[, c(6:7, 21)] %>% cbind(Taxa="Argentina red shrimp"),
crab[, c(6:7, 21)] %>% cbind(Taxa="Chilean king crab"),
skate[, c(6:7, 21)] %>% cbind(Taxa="Shortfin sand skate"),
sponge[, c(2:3, 6)] %>% cbind(Taxa="Demosponge"),
cwc %>% cbind(Taxa="Coldwater coral")
)
hake[, c(6:7, 21)] %>% cbind(Taxa="Argentine hake")
shrimp[, c(6:7, 21)] %>% cbind(Taxa="Argentina red shrimp")
sponge[, c(2:3, 6)] %>% cbind(Taxa="Demosponge")
head(sponge)
sponge[, c(6:7, 3)] %>% cbind(Taxa="Demosponge")
# Combine all occurrence data
occ <- rbind(hake[, c(6:7, 21)] %>% cbind(Taxa="Argentine hake"),
shrimp[, c(6:7, 21)] %>% cbind(Taxa="Argentina red shrimp"),
crab[, c(6:7, 21)] %>% cbind(Taxa="Chilean king crab"),
skate[, c(6:7, 21)] %>% cbind(Taxa="Shortfin sand skate"),
sponge[, c(6:7, 3)] %>% cbind(Taxa="Demosponge"),
cwc %>% cbind(Taxa="Coldwater coral")
)
skate[, c(6:7, 21)] %>% cbind(Taxa="Shortfin sand skate")
head(sponge)
names(sponge)
sponge[, c(6:7, 16)] %>% cbind(Taxa="Demosponge")
# Combine all occurrence data
occ <- rbind(hake[, c(6:7, 21)] %>% cbind(Taxa="Argentine hake"),
shrimp[, c(6:7, 21)] %>% cbind(Taxa="Argentina red shrimp"),
crab[, c(6:7, 21)] %>% cbind(Taxa="Chilean king crab"),
skate[, c(6:7, 21)] %>% cbind(Taxa="Shortfin sand skate"),
sponge[, c(6:7, 16)] %>% cbind(Taxa="Demosponge"),
cwc %>% cbind(Taxa="Coldwater coral")
)
knitr::opts_chunk$set(
collapse = TRUE,
message=FALSE,
warning=FALSE,
comment = "#>"
)
library(ArgentinaSSP245)
library(ArgentinaSSP245)
library(ggplot2)
library(dplyr)
library(patchwork)
library(tidyr)
library(RColorBrewer)
library(sf)
?ArgentinaSSP245
help("etopo2022")
